// Enhanced Sleepen functionality
document.addEventListener('DOMContentLoaded', function() {\n    \n    // Adventure duration and risk change handlers\n    const adventureDuration = document.getElementById('adventure-duration');\n    const adventureRisk = document.getElementById('adventure-risk');\n    \n    if (adventureDuration) {\n        adventureDuration.addEventListener('change', updateAdventurePreview);\n    }\n    \n    if (adventureRisk) {\n        adventureRisk.addEventListener('change', updateAdventurePreview);\n    }\n    \n    function updateAdventurePreview() {\n        const duration = adventureDuration ? adventureDuration.value : 'medium';\n        const risk = adventureRisk ? adventureRisk.value : 'normal';\n        \n        // Update adventure cards based on settings\n        const adventureCards = document.querySelectorAll('.adventure-type-card');\n        \n        adventureCards.forEach(card => {\n            const rewardTags = card.querySelectorAll('.reward-tag');\n            rewardTags.forEach(tag => {\n                if (tag.textContent.includes('経験値')) {\n                    const baseExp = getBaseExperience(card.getAttribute('data-adventure'));\n                    const multiplier = getDurationMultiplier(duration) * getRiskMultiplier(risk);\n                    const minExp = Math.floor(baseExp.min * multiplier);\n                    const maxExp = Math.floor(baseExp.max * multiplier);\n                    tag.textContent = `経験値 +${minExp}-${maxExp}`;\n                }\n            });\n        });\n    }\n    \n    function getBaseExperience(adventureType) {\n        switch(adventureType) {\n            case 'exploration': return {min: 20, max: 50};\n            case 'battle': return {min: 50, max: 100};\n            case 'treasure': return {min: 30, max: 70};\n            case 'mystery': return {min: 40, max: 80};\n            default: return {min: 20, max: 50};\n        }\n    }\n    \n    function getDurationMultiplier(duration) {\n        switch(duration) {\n            case 'short': return 0.8;\n            case 'medium': return 1.0;\n            case 'long': return 1.3;\n            default: return 1.0;\n        }\n    }\n    \n    function getRiskMultiplier(risk) {\n        switch(risk) {\n            case 'safe': return 0.7;\n            case 'normal': return 1.0;\n            case 'dangerous': return 1.5;\n            default: return 1.0;\n        }\n    }\n    \n    // Sleepen mood and energy management\n    function updateSleepenStats() {\n        const moodElement = document.getElementById('sleepen-mood');\n        const energyElement = document.getElementById('sleepen-energy');\n        const friendshipElement = document.getElementById('sleepen-friendship');\n        \n        if (moodElement && energyElement && friendshipElement) {\n            // Simulate gradual changes\n            const currentMood = parseInt(moodElement.textContent);\n            const currentEnergy = parseInt(energyElement.textContent);\n            const currentFriendship = parseInt(friendshipElement.textContent);\n            \n            // Update progress bars with animation\n            animateProgressBar('.sleepen-progress-fill', currentMood);\n        }\n    }\n    \n    function animateProgressBar(selector, percentage) {\n        const progressBars = document.querySelectorAll(selector);\n        progressBars.forEach(bar => {\n            bar.style.width = '0%';\n            setTimeout(() => {\n                bar.style.transition = 'width 1s ease';\n                bar.style.width = percentage + '%';\n            }, 100);\n        });\n    }\n    \n    // Enhanced interaction effects\n    const sleepenAvatar = document.querySelector('.sleepen-avatar');\n    if (sleepenAvatar) {\n        sleepenAvatar.addEventListener('click', function() {\n            // Add click animation\n            this.style.transform = 'scale(1.1)';\n            setTimeout(() => {\n                this.style.transform = 'scale(1)';\n            }, 200);\n            \n            // Show random interaction message\n            const messages = [\n                'スリーピンが嬉しそうにしています！',\n                'スリーピンがあなたを見つめています',\n                'スリーピンが小さく鳴きました',\n                'スリーピンが楽しそうに踊っています'\n            ];\n            \n            const randomMessage = messages[Math.floor(Math.random() * messages.length)];\n            showSleepenMessage(randomMessage);\n        });\n    }\n    \n    function showSleepenMessage(message) {\n        const messageElement = document.createElement('div');\n        messageElement.className = 'sleepen-message';\n        messageElement.style.cssText = `\n            position: absolute;\n            top: -50px;\n            left: 50%;\n            transform: translateX(-50%);\n            background: rgba(102, 126, 234, 0.9);\n            color: white;\n            padding: 8px 15px;\n            border-radius: 20px;\n            font-size: 14px;\n            font-weight: 600;\n            white-space: nowrap;\n            z-index: 1000;\n            animation: fadeInOut 3s ease;\n            pointer-events: none;\n        `;\n        messageElement.textContent = message;\n        \n        const avatarContainer = document.querySelector('.sleepen-avatar-container');\n        if (avatarContainer) {\n            avatarContainer.style.position = 'relative';\n            avatarContainer.appendChild(messageElement);\n            \n            setTimeout(() => {\n                if (messageElement.parentNode) {\n                    messageElement.parentNode.removeChild(messageElement);\n                }\n            }, 3000);\n        }\n    }\n    \n    // Advanced adventure mechanics\n    function calculateAdventureSuccess(sleepenStats, adventureType, risk) {\n        const { level, energy, mood, friendship } = sleepenStats;\n        \n        let baseSuccessRate = 0.7; // 70% base success rate\n        \n        // Level bonus\n        baseSuccessRate += (level - 1) * 0.05;\n        \n        // Energy penalty/bonus\n        if (energy < 30) baseSuccessRate -= 0.2;\n        else if (energy > 80) baseSuccessRate += 0.1;\n        \n        // Mood bonus\n        if (mood > 70) baseSuccessRate += 0.1;\n        else if (mood < 30) baseSuccessRate -= 0.1;\n        \n        // Adventure type modifiers\n        switch(adventureType) {\n            case 'battle':\n                if (level < 3) baseSuccessRate -= 0.3;\n                break;\n            case 'mystery':\n                if (friendship < 50) baseSuccessRate -= 0.2;\n                break;\n        }\n        \n        // Risk modifiers\n        switch(risk) {\n            case 'safe':\n                baseSuccessRate += 0.2;\n                break;\n            case 'dangerous':\n                baseSuccessRate -= 0.2;\n                break;\n        }\n        \n        return Math.max(0.1, Math.min(0.95, baseSuccessRate));\n    }\n    \n    // Item rarity system\n    const itemRarities = {\n        common: {\n            chance: 0.6,\n            items: ['虹のしずく', '夢の花', '星の欠片', '月の砂', '雲のクッション'],\n            color: '#888'\n        },\n        rare: {\n            chance: 0.25,\n            items: ['夢想の宝石', '記憶の結晶', '星空のマント', '幻影の鏡', '永遠の砂時計', '夢幻の笛'],\n            color: '#ff6b6b'\n        },\n        legendary: {\n            chance: 0.1,\n            items: ['創造主の筆', '夢の王冠', '次元の鍵', '星の心臓'],\n            color: '#ffd93d'\n        },\n        mythic: {\n            chance: 0.05,\n            items: ['時の水晶', '無限の書', '創世の種', '絶対零度の炎'],\n            color: '#a855f7'\n        }\n    };\n    \n    function generateRandomItem(adventureType, risk, luck = 0) {\n        let rarity = 'common';\n        const random = Math.random() + luck;\n        \n        if (random > 0.95) rarity = 'mythic';\n        else if (random > 0.85) rarity = 'legendary';\n        else if (random > 0.6) rarity = 'rare';\n        \n        // Adventure type bonuses\n        if (adventureType === 'treasure' && rarity === 'common') {\n            rarity = Math.random() > 0.5 ? 'rare' : 'common';\n        }\n        \n        // Risk bonuses\n        if (risk === 'dangerous' && rarity === 'common') {\n            rarity = Math.random() > 0.3 ? 'rare' : 'common';\n        }\n        \n        const rarityData = itemRarities[rarity];\n        const item = rarityData.items[Math.floor(Math.random() * rarityData.items.length)];\n        \n        return { item, rarity, color: rarityData.color };\n    }\n    \n    // Skill system\n    const availableSkills = {\n        level2: [{ name: '夢の解読', description: '夢の内容を分析し、隠された意味を見つけます' }],\n        level5: [{ name: '光の操作', description: '夢の中の光を自在に操ることができます' }],\n        level10: [{ name: '記憶の編集', description: '夢の記憶を編集・保存することができます' }],\n        level15: [{ name: '時間の操作', description: '夢の中の時間を遅くしたり早くしたりできます' }],\n        level20: [{ name: '次元の移動', description: '異なる夢の次元を移動することができます' }]\n    };\n    \n    function checkSkillUnlock(level) {\n        const newSkills = [];\n        \n        Object.keys(availableSkills).forEach(levelReq => {\n            const requiredLevel = parseInt(levelReq.replace('level', ''));\n            if (level >= requiredLevel) {\n                newSkills.push(...availableSkills[levelReq]);\n            }\n        });\n        \n        return newSkills;\n    }\n    \n    // Enhanced visual effects\n    function addParticleEffect(element, type = 'stars') {\n        const particles = document.createElement('div');\n        particles.className = 'particle-container';\n        particles.style.cssText = `\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            pointer-events: none;\n            overflow: hidden;\n        `;\n        \n        for (let i = 0; i < 10; i++) {\n            const particle = document.createElement('div');\n            particle.style.cssText = `\n                position: absolute;\n                width: 4px;\n                height: 4px;\n                background: #ffd93d;\n                border-radius: 50%;\n                animation: float 2s ease-in-out infinite;\n                animation-delay: ${i * 0.2}s;\n                left: ${Math.random() * 100}%;\n                top: ${Math.random() * 100}%;\n            `;\n            particles.appendChild(particle);\n        }\n        \n        element.style.position = 'relative';\n        element.appendChild(particles);\n        \n        setTimeout(() => {\n            if (particles.parentNode) {\n                particles.parentNode.removeChild(particles);\n            }\n        }, 2000);\n    }\n    \n    // Add floating animation CSS\n    const particleStyle = document.createElement('style');\n    particleStyle.textContent = `\n        @keyframes float {\n            0%, 100% { transform: translateY(0px) scale(1); opacity: 1; }\n            50% { transform: translateY(-20px) scale(1.2); opacity: 0.7; }\n        }\n        \n        @keyframes fadeInOut {\n            0% { opacity: 0; transform: translateX(-50%) translateY(10px); }\n            20%, 80% { opacity: 1; transform: translateX(-50%) translateY(0px); }\n            100% { opacity: 0; transform: translateX(-50%) translateY(-10px); }\n        }\n    `;\n    document.head.appendChild(particleStyle);\n    \n    // Initialize enhanced features\n    updateSleepenStats();\n    updateAdventurePreview();\n    \n    // Auto-update stats every 30 seconds\n    setInterval(updateSleepenStats, 30000);\n});